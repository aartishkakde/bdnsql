Practical No-1
Perform commands on Mongosh and perform the following
1.Write a query to store record of 10 products in your database
2.Write a query to store record of 10 employees in your database
a)first run this command to see the databases
>> show dbs
b)run this command to use the database
>>use sumit
c)Now create a collection
>> db.createCollection("products")
>>db.createCollection("employees")
d)inserting records in collection
db.products.insert({p_id:"1",price:600},{p_id:"2"},{p_id:"3",name:"phonecase",price:300},{p_id:"4",name:"powder",price:600},{p_id:"5",price:600},{p_id:"6",price:90,desc:"this is a water bottle of colour blue and height 5"},{price:00},{p_id:"8",price:600},{p_id:"9",price:600},{p_id:"10",price:800})
e)inserting only one record
>> db.employees.insertOne({emp_id:2,emp_name:"Teja",salary:8100})
f)inserting many/multiple records
db.employees.insertMany([{emp_id:11,salary:1600},{emp_id:2},{emp_id:"3",name:"prem",salary:3100},{emp_id:"4",name:"lower",salary:600},{emp_id:"5",salary:60055},{emp_id:"6",salary:90,designation:"chef"},{salary:010},{emp_id:"8",salary:9000},{emp_id:"9",salary:7665},{emp_id:"10",salary:1800}])
7)creating a variable and storing a record in it
>>var entry1={emp_id:"333"}
8)inserting that created variable in the collection(employees)
>>db.employees.insertOne(entry1)
9)now for  retrieving the whole collection type
>>db.employees.find()
10)convert the collection to a JSON format and print
>>db.employees.find().forEach(printjson)
11)db.products.find().pretty()(have to ask aarti)
-------------------------------------------------
Practical No-2
perform Commands on  mongosh and perform the following
Note) Create a collection employees(emp_id,emp_name,department,salary,_id)
db.employees.insertMany([{emp_id:11,salary:1600},{emp_id:2},{emp_id:"3",name:"prem",salary:3100},{emp_id:"4",name:"lower",salary:600},{emp_id:"5",salary:60055},{emp_id:"6",salary:90,designation:"chef"},{salary:010},{emp_id:"8",salary:9000},{emp_id:"9",salary:7665},{emp_id:"10",salary:1800}])
Note)Create a collection products(name,quantity) and more fields as you want but name and quantity is compulsary
db.products.insert({p_id:"1",price:600},{p_id:"2"},{p_id:"3",name:"phonecase",price:300},{p_id:"4",name:"powder",price:600},{p_id:"5",price:600},{p_id:"6",price:90,desc:"this is a water bottle of colour blue and height 5"},{price:00},{p_id:"8",price:600},{p_id:"9",price:600},{p_id:"10",price:800})
1)Write a mongoDB query to display all the documents in the collection employee 
>>db.employees.find()
2)Write a mongodb query to display field employee_id,name,department,and salary for all the documents in the collection employee
>> db.employees.find({},{emp_id:1,emp_name:1,department:1,salary:1});
3)write a mongodb query to display fields employee_id,name,department but exclude the field_id for all the documents in the collection employee.
>>db.employees.find({},{emp_id:1,emp_name:1,department:1,_id:0});
4)Write a mongodb query to display all the employee which are in the HR Department
>>db.employees.find({department:"HR"})
5)Write a mongodb query to set the salary of the employee to 50000,for employees which are in HR department
>> db.employees.updateMany({department:"HR"},{$set:{salary:50000}});
6)After this check it is updated or not
>>db.employees.find({department:"HR"})
7)write a mongodb query to set price 150 for the products whose
quantity is greater than 10
>> db.products.updateMany({quantity:{$gt:10}},{$set:{price:150}})
8)write a mongodb query product to remove record of any product
>>db.products.deleteOne({name:'guava'})
Note-(in the bracket we can specify anything which we want to delete)
9)write a mongodb query to rename product collections as product_details 
>>db.products.renameCollection("Product_details")
10)To see the changed name of the Collection
>>show.collections
-----------------------------------------------
Practical No 3
1.Create a SAMPLE collection orders.
a)customer(name)
b)address("city","country")
c)payment(cash,card,netbanking,upi)
d)email
e)ordertotal
f)orderitems("itemname","price","qty")
 db.orders.insertMany([
  "itemName": "notebook",
   {
     "customer": "michaeldesouza",
     "address": {
       "city": "jaipur",
       "state": "Maharashtra"
     },
     "paymentMode": "Cash",
     "email": "michael@gmail.com",
     "orderTotal": 991,
     "orderItems": [
       {
               "price": 345,
         "quantity": 90
       },
       {
         "itemName": "pen",
         "price": 4,
         "quantity": 30
       },
       {
         "itemName": "compassbox",
         "price": 35,
        "quantity": 10
       }
     ]
   },
   {
     "customer": "TeraJess",
     "address": {
       "city": "NewYork",
      "state": "america"
    },
     "paymentMode": "Netbanking",
     "email": "terajess@gmail.com",
     "orderTotal": 4000,
     "orderItems": [
       {
         "itemName": "bottle",
         "price": 15
      },
       {
         "itemName": "napkin",
         "price": 70,
         "quantity": 30
       },
       {
         "itemName": "box",
         "price": 35,
         "quantity": 10
       }
     ]
   }
 ]);
2.Write a query to display all documents from MONGODB orders collection
>>db.orders.find().pretty();
3.Write a query to display the order where PaymentMode is 'Cash'
>>db.orders.find({paymentMode:{$eq:"Cash"}})
5.Write a query to display where itemName is 'bottle'
>>db.orders.find({'orderItems.itemName':{$eq:"bottle"}})
6.Write a query to display the documents where orderTotal is greater than 500
>>db.orders.find({orderTotal:{$gt:500}})
7.Write a query to display the documents where orderTotal is greater than or equal to 500
>>db.orders.find({orderTotal:{$gte:500}})
8.Write a query to display the documents where OrderTotal is less than 900.
>> db.orders.find({orderTotal:{$lt:900}})
9.Write a query to display the documents where OrderTotal is less than or equal to 900.
>> db.orders.find({orderTotal:{$lte:900}})
10.Write a query to display the order where PaymentMode is not 'Cash' 
>> db.orders.find({paymentMode:{$ne:”cash”}})
11.Write a query to display Write a query to display the order where Item Name is ‘NoteBook’ or ‘Assignment Papers’ or ‘pen’
>> db.orders.find({ "orderItems.itemName":{ $regex:/notebook|papers|pen/i } })
12.Write a query to display the order where Item Name is not ‘NoteBook’ or ‘Assignment Papers’ 
>> db.orders.find({ "orderItems.itemName": { $not:/notebook|assignment papers/i } })
13.Write a query to display the order where city is Mumbai and Item Name is ‘NoteBook’ 
>> db.orders.find({ $and: [{ "address.city": "Mumbai" }, { "orderItems.itemName": "notebook" }] }).pretty()
14.Write a query to display the order where OrderTotal  is 600 or price is 200
>> db.orders.find({ $or: [{ orderTotal: 600 }, { "orderItems.price": 200 }] })
15.Write a query to display the order where OrderTotal  is not equal to 600 
>> db.orders.find({ $nor:[{orderTotal:600}]}).pretty()
16.Write a query to display the order where city is not Mumbai and Item Name is not ‘NoteBook’ 
>> db.orders.find({ $nor: [{ "address.city": "Mumbai" },{ "orderItems.itemName": "notebook" }]})
--------------------------------------------------
Practical No-4 A
AIM:MongoDB advanced queries with conditions
1.CREATE A SAMPLE DATABASE database_practical and collection orders.
2. insert some documents: insert nested document
3. Use the find() method to query documents from MongoDB collections.

db.orders.insertMany([
  {
    Customer: "abc",
    Address: { City: "Jaipur", Country: "India" },
    PaymentMode: "Card",
    Email: "abc@gmail.in",
    OrderTotal: 1000.80,
    OrderItems: [
      { ItemName: "notebook", Price: 150.00, Qty: 10 },
      { ItemName: "paper", Price: 10.00, Qty: 5 },
      { ItemName: "journal", Price: 200.00, Qty: 2 },
      { ItemName: "postcard", Price: 10.00, Qty: 50 }
    ]
  },
  {
    Customer: "xyz",
    Address: { City: "Delhi", Country: "India" },
    PaymentMode: "Cash",
    OrderTotal: 880.00,
    OrderItems: [
      { ItemName: "notebook", Price: 150.00, Qty: 5 },
      { ItemName: "paper", Price: 10.00, Qty: 5 },
      { ItemName: "postcard", Price: 10.00, Qty: 500 }
    ]
  },
  {
    Customer: "ron",
    Address: { City: "New York", Country: "USA" },
    PaymentMode: "Card",
    Email: "ron@mail.com",
    OrderTotal: 800.80,
    OrderItems: [
      { ItemName: "notebook", Price: 150.00, Qty: 5 },
      { ItemName: "postcard", Price: 10.00, Qty: 100 }
    ]
  }
]);

1.Display customer name starting with a.
>>db.orders.find({Customer: {$regex: "^a"}}).forEach(printjson)
2.Display email id which ends with .in
>>db.orders.find({Email: {$regex: ".in$"}}).forEach(printjson)
3.Display item name which starts with p and ends with r.
>>db.orders.find( { OrderItems.ItemName: { $regex: “^p.*r$” } } )
4.Match all documents where the field payment contains the whole word Cash (Make it case insensitive).
>>db.orders.find({ PaymentMode: { $regex: /cash/i } }) 
5.Multiline Match for Lines Starting with ab.
>>db.orders.find({Customer:{$regex:/^ab.*/gm}});
6.Use the . Dot Character to Match New Line
<<db.orders.find({ Customer: { $regex: /^ab.*$/s }});
7.Ignore White Spaces in Pattern
>>db.orders.find({ Customer: { $regex: /^a\s*b.*$/s }});
8.use sort() Method
>>db.orders.find().sort({ Customer: 1 });
9.Sorted collection
To get a sorted result, we append the sort() method to the end of the search query (find() method).
>>db.orders.find({},{_id:0, Customer: 1, OrderTotal: 1}).sort({"OrderTotal":1})
10.Sorting with the limit() method
>>db.orders.find({},{_id:0, Customer: 1, OrderTotal:1}.sort({OrderTotal":1}).limit(5).pretty()
11.Sorting with the skip() method
>>db.orders.find({},{_id:0, Customer: 1, OrderTotal:1}).sort({OrderTotal":1}).skip(3).pretty()
12.Fetch last 2 documents from the collection.
>>db.orders.find().sort({_id:-1}).limit(2).forEach(printjson)
-----------------------------------------------
PRACTICAL NO: 04 (B)
AIM: MongoDB advanced queries with conditions.
Aggregation in MongoDB

db.employees.insertMany([
  {
    emp_id: 1,
    emp_name: "John Doe",
    emp_department: "Engineering",
    emp_salary: 75000,
    emp_gender: "Male",
    emp_location: "New York"
  },
  {
    emp_id: 2,
    emp_name: "Jane Smith",
    emp_department: "Sales",
    emp_salary: 60000,
    emp_gender: "Female",
    emp_location: "Los Angeles"
  },
  {
    emp_id: 3,
    emp_name: "Michael Johnson",
    emp_department: "Engineering",
    emp_salary: 80000,
    emp_gender: "Male",
    emp_location: "San Francisco"
  },
  {
    emp_id: 4,
    emp_name: "Emily Brown",
    emp_department: "HR",
    emp_salary: 55000,
    emp_gender: "Female",
    emp_location: "Chicago"
  },
  {
    emp_id: 5,
    emp_name: "David Wilson",
    emp_department: "Marketing",
    emp_salary: 65000,
    emp_gender: "Male",
    emp_location: "New York"
  },
  {
    emp_id: 6,
    emp_name: "Jessica Taylor",
    emp_department: "Engineering",
    emp_salary: 75000,
    emp_gender: "Female",
    emp_location: "San Francisco"
  },
  {
    emp_id: 7,
    emp_name: "William Miller",
    emp_department: "Sales",
    emp_salary: 62000,
    emp_gender: "Male",
    emp_location: "Los Angeles"
  },
  {
    emp_id: 8,
    emp_name: "Sophia Anderson",
    emp_department: "Marketing",
    emp_salary: 67000,
    emp_gender: "Female",
    emp_location: "New York"
  },
  {
    emp_id: 9,
    emp_name: "James Lee",
    emp_department: "Engineering",
    emp_salary: 78000,
    emp_gender: "Male",
    emp_location: "San Francisco"
  },
  {
    emp_id: 10,
    emp_name: "Olivia Martinez",
    emp_department: "HR",
    emp_salary: 56000,
    emp_gender: "Female",
    emp_location: "Chicago"
  }
]);
Q. 13. Display all the details of female employees.
db.employees.aggregate([{$match:{emp_gender:'Female'}}])
Q.14 Display all the department names.
db.employees.aggregate([ 
    { $group:{ _id:'$emp_department'} }
])
Q.15 Display the accumulated values for each group for the department.
db.employees.aggregate([ 
    { $group:{ _id:'$department.name', totalEmployees: { $sum:1 } } 
}])
Q. 16 Display no. of male employees with their departments.
db.employees.aggregate([{$match:{emp_gender:'Male'}},
{$group:{_id:'$emp_department',totalEmployees:{$sum:1}}}]);
Q. 17.  Calculates the sum of salaries of all male employees in the same department.
db.employees.aggregate([{$match:{emp_gender:'Male'}},
{$group:{_id:{departname:'$emp_department'},totalSalaries:{$sum:'$emp_salary'}}}])
Q18. Display Salary of all the employees
db.employees.aggregate([ { $group: { _id: "$emp_id", total: { $sum: "$emp_salary" } } } ])
Q. 19 MAX salary in all departments:
db.employees.aggregate([ { $group: { _id: "$emp_department", total: { $max: "$emp_salary" } } } ])
Q. 20 MIN salary in all departments:
db.employees.aggregate([ { $group: { _id: "$emp_department", total: { $min: "$emp_salary" } } } ])
Q. 21 AVGERAGE salary of all departments:
db.employees.aggregate([ { $group: { _id: "$emp_department", total: { $avg: "$emp_salary" } } } ])
-----------------------------------------
Practical No – 5
Importing Json file :
open new cmd set the following path(just copy and paste)
not on mongo shell ha please open new fresh cmd and run
>> mongoimport --db aarti --collection employee --file C:\\restaurants.json
1. Write a MongoDB query to display all the documents in the collection TYCSRN.
>> db.TYCS.find().pretty()
2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection TYCSRN.
>> db.TYCS.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":1}).pretty()
3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection TYCSRN.
>> db.TYCS.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":0}).pretty()
4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection TYCSRN.
>> db.TYCS.find({},{"restaurant_id":1,"name":1,"borough":1,"address_zipcode":1,"_id":}).pretty() 
5. Write a MongoDB query to display all the documents which is in the borough is Bronx.
>> db.TYCS.find({"borough":"Bronx"}).pretty() 
6. Write a MongoDB query to display the first 5 records which is in the borough Bronx.
>> db.TYCS.find({"borough":"Bronx"}).limit(5).pretty() 
7. Write a MongoDB query to display the next 5 TYCSRN after skipping first 5 which are in the borough Bronx.
>> db.TYCS.find({"borough":"Bronx"}).skip(5).limit(5).pretty() 
8. Write a MongoDB query to find the TYCSRN who achieved a score more than 90.
>> db.TYCS.find({grades:{$elemMatch:{"score":{$gt:90}}}}).pretty() 
9. Write a MongoDB query to find the TYCSRN that achieved a score, more than 80 but less than 100.
>> db.TYCS.find({grades:{$elemMatch:{"score":{$gt:80,$lt:100}}}}).pretty() 
10. Write a MongoDB query to find the TYCSRN which locate in latitude value less than - 95.754168.
>> db.TYCS.find({"address.coord":{$lt:-95.754168}}).pretty() 
11. Write a MongoDB query to find the TYCSRN that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than 65.754168.
>> db.TYCS.find({$and:[{"cuisine":{$ne:"American"}},{"grades.score":{$gt:70}},{"address.coord":{$lt:-65.754168}}]}).pretty
12. Write a MongoDB query to find the TYCSRN which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than - 65.754168.
>>  db.TYCS.find({"cusine":{$ne:"AMerican"},"grades.score":{$gt:70},"address.coord":{$lt:-65.754168}}).pretty()
13. Write a MongoDB query to find the TYCSRN which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
>> db.TYCS.find({"cusine":{$ne:"American},"grades.grade":"A","borough":"Brooklyn"}).sort({"cuisine":-1}).pretty() 
14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which contain 'Wil' as first three letters for its name.
>> db.TYCS.find({name:/^Wil/},{"restuarant_id":1,"name":1,"borough":1,"cuisine":1}).pretty() 
15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which contain 'ces' as last three letters for its name.
>> db.TYCS.find({name:/ces$/},{"restuarant_id":1,"name":1,"borough":1,"cuisine":1}).pretty() 
16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which contain 'Reg' as three letters somewhere in its name.
>> db.TYCS.find({name:/.*Reg.*/},{"restuarant_id":1,"name":1,"borough":1,"cuisine":1}).pretty() 
17. Write a MongoDB query to find the TYCSRN which belong to the borough Bronx and prepared either American or Chinese dish.
>> db.TYCS.find({"borough":"Bronx",$or;[{"cuisine":"American},{"cuisine":"Chinese"}]}).pretty() 
18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which belong to the borough Staten Island or Queens or Bronxor Brooklyn .
>> db.TYCS.find({"borough":{$in:["StatenIsland","Queens","Bronx","Brooklyn"]}},{"restaurant_is":1,"name":1,"borough":1,"cusine":1}).pretty() 
19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
>> db.TYCS.find({"borough":{$nin:["StatenIsland","Queens","Bronx","Brooklyn"]}},{"restaurant_is":1,"name":1,"borough":1,"cusine":1}).pretty() 
20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which achieved a score which is not more than 10.
>> db.TYCS.find({"grades.score":{$not{$gt:10}}},{"restaurant_id":1,"name":1,"borough":1,"cusine":1}).pretty()
21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'
>> db.TYCS.find({$or:[{name:/^Wil/},{"$and":[{"cusine":{$ne:"AMerican"}},{"cuisine":{$ne:"Chines"}}]}]},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty() 
22. Write a MongoDB query to find the restaurant Id, name, and grades for those TYCSRN which achieved a grade of "A" and scored 11 on an ISODate "201408-11T00:00:00Z" among many of survey dates.
>> db.TYCS.find({"grades.date":ISODate("201408-11T00:00:00Z"),"grades.score":11},{"restaurant_id":1,"name":1,"grades":1}).pretty() 
23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants
where the 2nd element of grades array contains a grade of &quot;A&quot; and score 9 on an ISODate &quot;2014-08-11T00:00:00Z&quot;.
>>db.TYCS.find({"grades.1.date":ISPDate("2014-08-11T00:00:00Z"),"grades.1.grade":"A","grades.1.score":9},{"restaurant_id":1,"name":1,"grades":1}).pretty()
24. Write a MongoDB query to find the restaurant Id, name, address and geographical location
for those TYCSRN where 2nd element of coord array contains a value which is more than 42 and upto 52.
>>db.TYCS.find({"address.coord.1":{$gt:42,$lte:52}},{"restaurant_id":1,"name":1,"address":1,"coord":1}).pretty()
25. Write a MongoDB query to arrange the name of the TYCSRN in ascending order along with all the columns.
>>db.TYCS.find().sort({"name":1}).pretty()
26. Write a MongoDB query to arrange the name of the TYCSRN in descending along with all the columns.
>>db.TYCS.find().sort({"name":-1}).pretty()
27. Write a MongoDB query to arranged the name of the cuisine in ascending order and borough should be in descending order.
>>db.TYCS.find().sort({"cuisine":1,"borough":-1}).pretty()
28.Write a MongoDB query to know whether all the addresses contains the street or not.
>>db.TYCS.find({"address.street":{$exists:true}}).pretty()
29.Write a MongoDB query which will select all documents in the TYCSRN collection wherethe coord field value is Double
>>db.TYCS.find({"address.coord":{$type:1}}).pretty()
30. Write a MongoDB query which will select the restaurant Id, name and grades for those TYCSRN which returns 0 as a remainder after dividing the score by 7.
>>db.TYCS.find({"grades.score":{$mod:[7,0]}},{"restaurant_id":1,"name":1,"grades":1}).pretty()
31.Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those TYCSRN which contains &#39;mon&#39; as three letters somewhere in its name.
>>db.TYCS.find({"name:{$regex:"mon,*",$options:"1"}},{"name":1,"address_coord:1,*cuisine":1}).pretty()
32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and
cuisine for those TYCSRN which contain &#39;Mad&#39; as first three letters of its name.
>>db.TYCS.find({name:{regec:/^Mad/i}},{"name":1,"borough":1,address.coord:1,"cuisine":1}).pretty()
------------------------------------------
Practical No – 6
--Aim: Text search in MongoDB – Text fields in collection, create an index, prepare search items, text search
--Data:
db.peaks.insertMany([
  {
    "name": "Everest",
    "desc": "Mount Everest is Earth's highest mountain above sea level",
    "height": 8848,
    "loc": ["Nepal", "China"],
    "ascents": {
      "first": {
        "year": 1953
      },
      "first winter": {
        "total": 5656
      }
    }
  },
  {
    "name": "K2",
    "desc": "K2 is the second highest mountain on Earth",
    "height": 8611,
    "loc": ["Pakistan", "China"],
    "ascents": {
      "first": {
        "year": 1954
      },
      "first winter": {
        "year": 1921
      },
      "total": 306
    }
  }
]);
1. Verify that the documents were properly inserted by running the find() method
>> db.peaks.find()
2. Retrieve documents that describe a mountain peak with a height value greater than 8700. Check the returned and total keys examined.
>> db.peaks.find(
{"height":{$gt:8700}}
)
*--Execution Performance:
>> db.peaks.find(
{"height":{$gt:8700}}
).explain("executionStats")
3. Create an index on the height field in the peaks collection
>> db.peaks.createIndex({"height":1})
4. Check the returned and total keys examined.
>> db.peaks.find(
{"height":{$gt:8700}}
).explain("executionStats")
5. Create an indexe to ensure the values of a given field “name” will be unique for every document in a collection
>> db.peaks.createIndex({"name":1},{"unique":true})
6. Check whether you’re able to add a second document to the collection using insertOne().
>> db.peaks.insertOne({
"name":"ChoOyu",
"desc":"Cho Oyu the sixth tallest in world",
"height":8188,
"loc":["nepal","China"],
"ascets":{
"first":{
"year":1953
},
"first winter":{
"year":1980
},
"total":5656
}
})
7. Return documents whose total — a field nested within the ascents document found in each document in the peaks collection is greater than 300 and sorts the results in descending order
>> db.peaks.find({
"ascents.total":{$gt:300}}
).sort({"ascents.total":-1})
8. Run the same query, but include the explain("executionStats") method used previously
>> db.peaks.find({
"ascents.total":{$gt:300}}
).sort({"ascents.total":-1}).explain("executionStats")
9. Create an index on the total field within the ascents document. (Embedded Indexing
>> db.peaks.createIndex({"ascents.toal":1})
10.Run the previous query once again to check whether the index helped MongoDB avoid performing a full collection scan.
>> db.peaks.find({
"ascents.total":{$gt:300}}
).sort({"ascents.total":-1}).explain("executionStats")
11.Find mountains with a height of less than 8848 meters whose first winter ascent occurred after the year 1980.
>> db.peaks.find({"ascents.first winter.year":{$gt:1980},"height":{$lt:8848}}).sort({"height":-1})
12.Find how MongoDB performed this same query by adding explain() method.
>> db.peaks.find({"ascents.first winter.year":{$gt:1980},"height":{$lt:8848}}).sort({"height":-1}).explain("executionStats")
13.Create an ascending index for peaks’ first winter ascents and descending index for their heights. (Compound Field Index)
>> db.peaks.createIndex({
"ascents.first winter.year":1,"height":-1})
15.Finding all the mountains in the collection that are located in Nepal
>> db.peaks.find({"loc":"Nepal"})
16. 16.Create a new index for the location field. (Multi-key Index)
>> db.peaks.createIndex({"loc":1})
18.List all the indexes you’ve defined on the peaks collection.
>> db.peaks.getIndexes()
19.To remove the index created on the first winter ascent and height
>> db.peaks.dropIndex("ascents.first winter.year_1_height_-1")
20. 20.Retrieve documents matching with the keyword “Earth’s” in description field using an index.
---Index creation:
>> db.peaks.createIndex({desc:"text"})
---For Phrase search:
>> db.peaks.find({$text:{$search:"earth"}})
21. Retrieve documents matching with the keyword “Earth’s highest mountain” in description field using an index.
--For exact phrase search:
>> db.peaks.find({$text:{$search:"\"earth\""}})
22. Retrieve documents containing the keywords “highest mountain” but not the keyword “fourth” in description field using an index.
>> db.peaks.find({$yexy:{$search:"highest mountain -fourth"}})
---------------------------------------
Practical No – 7
Aim : Write a Java program to demonstrate the connections to MongoDB
-- check for javaa installation
>> java -version
-- set this path if not java not available() just copy paste following commands
>> JAVA_HOME=C:\Program Files\Java\jdk1.8.0_221
>> PATH=%PATH%;%JAVA_HOME%\bin
-- Now Compile and Run Java Code
-- eg:- javac insert.java(compile)
-- java insert(run)
Q.1)Insert:
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.MongoClient;
import org.bson.Document;
public class insert
{
	public static void main(String args[])
	{
		MongoClient mongo=new MongoClient("localhost",27017);
		System.out.println("connected to the database successfully:");
		MongoDatabase database=mongo.getDatabase("TYCSJD");
		MongoCollection<Document>collection=database.getCollection("TYCSCOLL");
		System.out.println("Collection TYCSCOLL selected successfully");
		
		Document document=new Document();
		document.append("ID",1);
		document.append("Rollno",238701);
		document.append("age",21);
		document.append("college","Mulund College of Commerce");
		collection.insertOne(document);
		System.out.println("Document inserted Successfully");
	}
}
>> javac insert.java
>> java insert
>> show dbs
>> show aarti
>> show collections
>> db.TYCSCOLL.find()
Q.2)Retrieve:
import com.mongodb.client.MongoCollection;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;
import com.mongodb.MongoClient;
import org.bson.Document;
import java.util.Iterator;
public class retrieve {
    public static void main(String args[]) {
        MongoClient mongo = new MongoClient("localhost", 27017);
        System.out.println("Connected to the database successfully:");
        MongoDatabase database = mongo.getDatabase("TYCSJD");
        MongoCollection<Document> collection = database.getCollection("TYCSCOLL");
        System.out.println("Collection TYCSCOLL selected successfully");
       FindIterable<Document> iterDoc = collection.find();
      Iterator it = iterDoc.iterator();
      while (it.hasNext()) {
         System.out.println(it.next());
      }
        
        mongo.close();
    }
}
>> javac retrieve.java
>> java retrieve
Q.3) Update:
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.MongoClient;
import org.bson.Document;
import com.mongodb.client.model.*;
public class Update {
    public static void main(String[] args) {
        MongoClient mongo = new MongoClient("localhost", 27017);
        System.out.println("Connected to the database successfully:");
        MongoDatabase database = mongo.getDatabase("TYCSJD");
        MongoCollection<Document> collection = database.getCollection("TYCSCOLL");
        System.out.println("Collection TYCSCOLL selected successfully");

        Document filter = new Document("Rollno", 238701);

        Document updateDoc = new Document("$set", new Document("age", 22));
        collection.updateOne(filter, updateDoc);

        System.out.println("Document updated Successfully");
    }
}
>> java Update
>>db.TYCSCOLL.find()
Q.4)Delete:
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.MongoClient;
import org.bson.Document;
import com.mongodb.client.model.Filters;

public class Delete {
    public static void main(String[] args) {
        MongoClient mongo = new MongoClient("localhost", 27017);
        System.out.println("Connected to the database successfully:");
        MongoDatabase database = mongo.getDatabase("TYCSJD");
        MongoCollection<Document> collection = database.getCollection("TYCSCOLL");
        System.out.println("Collection TYCSCOLL selected successfully");
        Document filter = new Document("Rollno", 238701);
        collection.deleteOne(filter);
        System.out.println("Document deleted Successfully");
    }
}
>> java Delete
>> db.TYCSCOLL.find()
--------------------------------------
Practical No – 8
Aim : Write a PHP program to demonstrate the connections to MongoDB
Q.1) Insert
<?php
$m=new MongoClient();
echo "Connection to Database Succesfully";
$db=$m->mydb;
echo "Database my db selected";
$collection=$db->mycol;
echo "Collection selected succesfully";
$doc=array(
"title" => "MongoDB",
"description" => "database",
"like"=>100,
"url"=>"http://www.mongo.com",
"by"=>"NoSql");
$collection->insert($doc);
echo "Document inserted succesfully";
?>
-- open xammp 
-- for loaclhost/insert.php/
>> use mydb
>> show collections
>> db.mycol.find()
Q.2) Retrieve
<?php
$m=new MongoClient();
echo "Connection to Database Succesfully";
$db=$m->mydb;
echo "Database my db selected";
$collection=$db->mycol;
echo "Collection selected succesfully";
$cursor=$collection->find();
foreach ($cursor as $doc){
echo "<br>".$doc["title"]."<br>";
echo "<br>".$doc["description"]."<br>";
echo "<br>".$doc["url"]."<br>";
echo "<br>".$doc["like"]."<br>";
}
?>
Output:
Q.3)Update
<?php
   $m = new MongoClient();
   echo "Connection to database successfully";	
   $db = $m->mydb;
   echo "Database mydb selected";
   $collection = $db->mycol;
   echo "Collection selected succsessfully";
   $collection->update(array("title"=>"MongoDB"), 
      array('$set'=>array("title"=>"MongoDB Tutorial")));
   echo "Document updated successfully";	
   $cursor = $collection->find();	
   echo "Updated document";	
   foreach ($cursor as $document) {
      echo $document["title"] . "<br>";
   }
?>
Output:
>> db.mycol.find()
Q.4)Delete
<?php
   $m = new MongoClient();
   echo "Connection to database successfully";	
   $db = $m->mydb;
   echo "Database mydb selected";
   $collection = $db->mycol;
   echo "Collection selected succsessfully";   
   $collection->remove(array("title"=>"MongoDB Tutorial"));
   echo "Documents deleted successfully"; 
   $cursor = $collection->find();	
   echo "Delete document";	
   foreach ($cursor as $document) {
      echo $document["title"] . "\n";
   }
?>
 Output:
>> db.mycol.find()
----------------------------------------
Practical No – 9
Aim : Write a Python program to demonstrate the connections to MongoDB
Q.1)Insert
from pymongo import MongoClient
client = MongoClient('localhost',27017)
db = client.pydb
def insert():
    try:
        empID=input('Enter the ID : ')
        empName=input('Enter the Name :')
        empAge=input('Enter the Age : ')
        empCountry=input('Enter the Country : ')
        db.pycoll.insert_one(
                {
                    "_id":empID,
                    "name":empName,
                    "age":empAge,
                    "country":empCountry
                }
            )
        print("\nInsert the Data Successfully\n")
    except Exception:
        print(str(e))
insert()
>> use pydb
>> db.pycoll.find()
Q.2)Update:
from pymongo import MongoClient
client = MongoClient('localhost',27017)
db = client.pydb
def update():
    try:
        name=input('Enter the Name :')
        age=input('Enter the Updated Age : ')
        db.pycoll.update_one(
             { "name":name},{"$set":{"age":age}}
            )
        print("\n Data updated Successfully\n")
    except Exception:
        print(str(e))
update()
>> db.pycoll.find()
Q.3)Delete:
from pymongo import MongoClient
client = MongoClient('localhost',27017)
db = client.pydb
def delete():
    try:
        Id=input('Enter the Id :')

        db.pycoll.delete_one(
             { "_id":Id}
            )
        print("\n Data Deleted Successfully\n")
    except Exception:
        print(str(e))
delete()
>> db.pycoll.find()
----------------------------------------
Practical No - 10
AIM: Perform backup and restore databases in MongoDB
-- steps:open cmd 
>> cd "C:\Program Files\MongoDB\Server\3.6\bin"
*do not type mongo and enter into queries. only set this path on new cmd 
and run following command
a) Backup and restore of All the databases:
Step 1: To create the backup files of databases. 
>> mongodump
Step 2: Switch to the databases and delete all.
-- Now open new cmd and run mongo now enter into queries and run following
>> show dbs 
>> db.dropDatabase()
>> show dbs
(your db should be deleted)
Step 3: To restore all the deleted databases.
>> mongorestore 
run above on the cmd where you had set the path 
Step 4: Check the results. 
>> show dbs
-- open this path and show result 
-- C:\Program Files\MongoDB\Server\3.6\bin\dump\aarti
b) Backup and restore a single the database:
-- steps:open cmd 
>> cd "C:\Program Files\MongoDB\Server\3.6\bin"
*do not type mongo and enter into queries. only set this path on new cmd 
and run following command
Step 1: Delete the dump folder created in bin directory of Mongodb.
>> mongodump --db aarti
-- run this command on cmd where you set the path
Step 2: Delete one of the databases.
>> db.dropDatabase() 
-- now open another cmd enter monog 
-- and run above command on mongo cmd
Step 3: Restoring the deleted database.
>> mongorestore --db aarti dump/aarti
-- rum above on cmd where set the path
Step 4: Check the result.
>> show dbs 
-- open this path and show result 
-- C:\Program Files\MongoDB\Server\3.6\bin\dump\aarti
c) Backup and restore a single collection:
-- steps:open cmd 
>> cd "C:\Program Files\MongoDB\Server\3.6\bin"
*do not type mongo and enter into queries. only set this path on new cmd 
and run following command
Step 1: To back up the collection.
>> mongodump --db aarti --collection peaks
Step 2: Check the result in Bin folder.
-- open this path and show result 
-- C:\Program Files\MongoDB\Server\3.6\bin\dump\aarti
Step 3: To restore, delete the collection.
-- Now open another cmd and enter mongo
-- And type following command on mongo cmd 
>> db.peaks.drop()
Step 4: To restore the deleted collection.
-- on cmd where you set the path
>> mongorestore --db aarti --collection col dump/aarti/peaks.bson
Step 5: Check the collection.
-- Now open another cmd and enter mongo
-- And type following command on mongo cmd 
>> show collections	
